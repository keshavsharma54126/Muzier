// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String?
  googleId      String?        @unique
  name          String?
  imageUrl      String?
  streams       Stream[]
  songs         Song[]
  upvotes       Upvote[]
}

model Stream{
  id            String          @id @default(uuid())
  name          String
  code          String         @unique
  roomtype      RoomType    
  type          StreamType?
  active        Boolean?         @default(true)
  songs         Song[]
  userId        String
  user          User            @relation(fields: [userId],references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       
}

model Song{
  id        String            @id @default(uuid())
  name      String
  url       String
  thumbnail  String
  upvotes   Upvote[]
  streamId  String           
  stream    Stream            @relation(fields: [streamId],references: [id])
  userId    String
  user      User              @relation(fields: [userId],references: [id])
  createdAt  DateTime         @default(now())
}

model Upvote{
  id            String          @id @default(uuid())
  songId        String          @unique
  userId        String          @unique
  upvoted        Boolean        @default(false)
  downvoted      Boolean        @default(false)
  user          User            @relation(fields: [userId],references: [id])
  song          Song          @relation(fields: [songId],references: [id])
  createdAt     DateTime      @default(now())
}






enum StreamType{
  Spotify
  Youtube
}

enum RoomType{
  public
  private
}